(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{510:function(v,_,t){v.exports=t.p+"assets/img/image-20201223214612995.cbe59331.png"},511:function(v,_,t){v.exports=t.p+"assets/img/image-20201223215140821.2410bce6.png"},512:function(v,_,t){v.exports=t.p+"assets/img/image-20201223220236107.a72d6e7a.png"},614:function(v,_,t){"use strict";t.r(_);var s=t(20),e=Object(s.a)({},(function(){var v=this,_=v.$createElement,s=v._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h1",{attrs:{id:"b-树、b-树、b-树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树、b-树、b-树"}},[v._v("#")]),v._v(" "),s("code",[v._v("B 树")]),v._v("、"),s("code",[v._v("B+ 树")]),v._v("、"),s("code",[v._v("B*树")])]),v._v(" "),s("h2",{attrs:{id:"b-树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树"}},[v._v("#")]),v._v(" B 树")]),v._v(" "),s("p",[s("code",[v._v("B-tree")]),v._v(" 树即 B 树，B 是 "),s("code",[v._v("Balanced")]),v._v(" 平衡的意思。")]),v._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[v._v("TIP")]),v._v(" "),s("p",[s("code",[v._v("B-")]),v._v(" 树，这个也是 B 树，只是翻译的文本容易产生误解。")])]),v._v(" "),s("p",[s("img",{attrs:{src:t(510),alt:"image-20201223214612995"}})]),v._v(" "),s("p",[v._v("上图就是一个 B 树，说明如下：")]),v._v(" "),s("ul",[s("li",[s("p",[v._v("B 树的阶：节点的最多 "),s("strong",[v._v("子节点")]),v._v(" 个数")]),v._v(" "),s("p",[v._v("如：2-3 树的阶是 3，2-3-4 树的阶是 4")])]),v._v(" "),s("li",[s("p",[v._v("B 树的搜索")]),v._v(" "),s("p",[v._v("从 "),s("strong",[v._v("根节点开始")]),v._v("，对节点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的 "),s("strong",[v._v("儿子节点")]),v._v("。")]),v._v(" "),s("p",[v._v("然后重复，直到所对应的儿子节点指针为空，或则已经是叶子节点。")])]),v._v(" "),s("li",[s("p",[v._v("关键字集合分布在整棵树中")]),v._v(" "),s("p",[v._v("即："),s("strong",[v._v("叶子节点和非叶子节点都存放数据")])])]),v._v(" "),s("li",[s("p",[v._v("搜索有可能在非叶子节点结束")])]),v._v(" "),s("li",[s("p",[v._v("其搜索性能等价于在关键字全集内做一次二分查找")])])]),v._v(" "),s("h2",{attrs:{id:"b-树-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树-2"}},[v._v("#")]),v._v(" B + 树")]),v._v(" "),s("p",[v._v("在 MySQL 中，有些索引就是用 B 树或则 B+ 树实现的。B+ 树是 B 树的变体，也是一种多路搜索树。")]),v._v(" "),s("p",[s("img",{attrs:{src:t(511),alt:"image-20201223215140821"}})]),v._v(" "),s("p",[v._v("B + 树说明：")]),v._v(" "),s("ol",[s("li",[s("p",[v._v("B+ 树的搜索与 B 树基本相同，区别是 "),s("strong",[v._v("B+ 树只有到达叶子节点才命中")]),v._v("（B 树可以在非叶子节点命中），其性能也等价于在关键字全集做一次二分查找")])]),v._v(" "),s("li",[s("p",[v._v("所有 "),s("strong",[v._v("关键字都出现在叶子节点的链表中")])]),v._v(" "),s("p",[v._v("即：数据只能在叶子节点，也叫 "),s("strong",[v._v("稠密索引")]),v._v("，且链表中的关键字（数据）恰好是有序的。")])]),v._v(" "),s("li",[s("p",[v._v("不可能在非叶子节点命中")])]),v._v(" "),s("li",[s("p",[s("strong",[v._v("非叶子节点相当于是叶子节点的索引")]),v._v("，也叫 "),s("strong",[v._v("稀疏索引")]),v._v("，叶子节点相当于是存储（关键字）数据的数据层")])]),v._v(" "),s("li",[s("p",[v._v("更适合文件索引系统")])]),v._v(" "),s("li",[s("p",[v._v("B 树和 B+ 树有各自的应用场景，不能说 B+ 树完全比 B 树好。")])])]),v._v(" "),s("p",[v._v("B+ 树的这种设计，应该是类似分段思想，比如："),s("code",[v._v("5,28,65")]),v._v("，下面存放三个节点：")]),v._v(" "),s("ul",[s("li",[s("code",[v._v("5-28")]),v._v(" 的段，为一个节点")]),v._v(" "),s("li",[s("code",[v._v("28-65")]),v._v(" 的段，为一个节点")]),v._v(" "),s("li",[s("code",[v._v("65")]),v._v(" 以上的段，为一个节点")])]),v._v(" "),s("p",[v._v("比如查询  30 ，直接找到在第二个节点中，然后往下一个目录索引找，就很快能定位到数据。")]),v._v(" "),s("h2",{attrs:{id:"b-树-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树-3"}},[v._v("#")]),v._v(" "),s("code",[v._v("B*")]),v._v(" 树")]),v._v(" "),s("p",[s("code",[v._v("B*")]),v._v(" 树是 B+ 树的变体，"),s("strong",[v._v("在 B+ 树的非根和非叶子节点再增加指向兄弟的指针")])]),v._v(" "),s("p",[s("img",{attrs:{src:t(512),alt:"image-20201223220236107"}})]),v._v(" "),s("p",[v._v("说明：")]),v._v(" "),s("ul",[s("li",[s("p",[s("code",[v._v("B*")]),v._v(" 树定义了 "),s("strong",[v._v("非叶子节点")]),v._v(" 关键字个数至少为 "),s("code",[v._v("(2/3)*M")]),v._v(" ，即块的最低使用率为 "),s("code",[v._v("2/3")]),v._v("，而 B+ 树的块的最低使用率为 B+ 树的 "),s("code",[v._v("1/2")])]),v._v(" "),s("p",[v._v("M 是指树的度，也就是层。")])]),v._v(" "),s("li",[s("p",[v._v("从第 1 个特点，可以看出 "),s("code",[v._v("B*")]),v._v(" 树分配新节点的概率比 B+ 树要低，空间使用率更高。")])])])])}),[],!1,null,null,null);_.default=e.exports}}]);