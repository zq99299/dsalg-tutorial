(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{428:function(t,v,s){t.exports=s.p+"assets/img/image-20200816230100524.4d3f188f.png"},429:function(t,v,s){t.exports=s.p+"assets/img/image-20200816230724232.8f14688b.png"},430:function(t,v,s){t.exports=s.p+"assets/img/image-20200816231058264.f58606f8.png"},431:function(t,v,s){t.exports=s.p+"assets/img/image-20200830144951559.1a5309dd.png"},432:function(t,v,s){t.exports=s.p+"assets/img/image-20200830150132228.fd1365c5.png"},433:function(t,v,s){t.exports=s.p+"assets/img/image-20200831223506200.7f06f826.png"},585:function(t,v,s){"use strict";s.r(v);var _=s(20),a=Object(_.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"算法时间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法时间复杂度"}},[t._v("#")]),t._v(" 算法时间复杂度")]),t._v(" "),_("p",[t._v("衡量算法的性能的好坏，可以使用时间时间复杂度")]),t._v(" "),_("p",[_("strong",[t._v("度量")]),t._v(" 一个程序（算法）执行时间的两种方法：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("事后统计法")]),t._v(" "),_("p",[t._v("简单说：就是把程序运行起来，然后查看运行完成的总时间。")]),t._v(" "),_("p",[t._v("但是有一个问题：所统计的时间，依赖于计算机的硬件、软件等环境因素。如果要使用这种方式，需要在同一台计算机相同状态下运行程序，才能比较哪个算法速度更快")])]),t._v(" "),_("li",[_("p",[t._v("事前估算法")]),t._v(" "),_("p",[t._v("通过分析某个 "),_("strong",[t._v("算法的时间复杂度")]),t._v(" 来判断哪个算法更优")])])]),t._v(" "),_("h2",{attrs:{id:"时间频度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时间频度"}},[t._v("#")]),t._v(" 时间频度")]),t._v(" "),_("p",[t._v("一个算法 "),_("strong",[t._v("花费的时间")]),t._v(" 与算法中 "),_("strong",[t._v("语句的执行次数")]),t._v(" 成正比，哪个算法中语句执行次数多，它花费时间就多。一个算法中的 "),_("strong",[t._v("语句执行次数称为语句频度或时间频度")]),t._v("。"),_("strong",[t._v("记为 "),_("code",[t._v("T(n)")])])]),t._v(" "),_("h3",{attrs:{id:"举例-基本案例"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#举例-基本案例"}},[t._v("#")]),t._v(" 举例-基本案例")]),t._v(" "),_("p",[t._v("计算 1-100 所有数字之和，下面有两种算法：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("算法 1：循环累加")]),t._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" total "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" end "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用 for 循环计算")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" end"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  total "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" i\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br")])]),_("p",[_("code",[t._v("T(n) = n + 1")]),t._v("，这里的 "),_("code",[t._v("n=100")]),t._v("，因为要循环 100 次，还有一次，是跳出循环的判断")])]),t._v(" "),_("li",[_("p",[t._v("算法 2：直接计算")]),t._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[t._v("total "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("end"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" end"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br")])]),_("p",[_("code",[t._v("T(n) = 1")])])])]),t._v(" "),_("p",[t._v("对于时间频度，有如下几个方面可以忽略")]),t._v(" "),_("h3",{attrs:{id:"忽略常数项"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#忽略常数项"}},[t._v("#")]),t._v(" 忽略常数项")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("n")]),t._v(" "),_("th",[_("code",[t._v("T(n)=2*n+20")])]),t._v(" "),_("th",[_("code",[t._v("T(n)=2*n")])]),t._v(" "),_("th",[_("code",[t._v("T(3*n+10)")])]),t._v(" "),_("th",[t._v("T(3*n)")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("1")]),t._v(" "),_("td",[t._v("22")]),t._v(" "),_("td",[t._v("2")]),t._v(" "),_("td",[t._v("13")]),t._v(" "),_("td",[t._v("3")])]),t._v(" "),_("tr",[_("td",[t._v("2")]),t._v(" "),_("td",[t._v("24")]),t._v(" "),_("td",[t._v("4")]),t._v(" "),_("td",[t._v("16")]),t._v(" "),_("td",[t._v("6")])]),t._v(" "),_("tr",[_("td",[t._v("5")]),t._v(" "),_("td",[t._v("30")]),t._v(" "),_("td",[t._v("10")]),t._v(" "),_("td",[t._v("25")]),t._v(" "),_("td",[t._v("15")])]),t._v(" "),_("tr",[_("td",[t._v("8")]),t._v(" "),_("td",[t._v("36")]),t._v(" "),_("td",[t._v("16")]),t._v(" "),_("td",[t._v("34")]),t._v(" "),_("td",[t._v("24")])]),t._v(" "),_("tr",[_("td",[t._v("15")]),t._v(" "),_("td",[t._v("50")]),t._v(" "),_("td",[t._v("30")]),t._v(" "),_("td",[t._v("55")]),t._v(" "),_("td",[t._v("45")])]),t._v(" "),_("tr",[_("td",[t._v("30")]),t._v(" "),_("td",[t._v("80")]),t._v(" "),_("td",[t._v("60")]),t._v(" "),_("td",[t._v("100")]),t._v(" "),_("td",[t._v("90")])]),t._v(" "),_("tr",[_("td",[t._v("100")]),t._v(" "),_("td",[t._v("220")]),t._v(" "),_("td",[t._v("200")]),t._v(" "),_("td",[t._v("310")]),t._v(" "),_("td",[t._v("300")])]),t._v(" "),_("tr",[_("td",[t._v("300")]),t._v(" "),_("td",[t._v("620")]),t._v(" "),_("td",[t._v("600")]),t._v(" "),_("td",[t._v("910")]),t._v(" "),_("td",[t._v("900")])])])]),t._v(" "),_("p",[t._v("上表对应的曲线图如下")]),t._v(" "),_("p",[_("img",{attrs:{src:s(428),alt:"image-20200816230100524"}})]),t._v(" "),_("p",[t._v("结论：")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("2n+20")]),t._v(" 和 2n 随着 n 变大，执行曲线无限接近， 20 可以忽略")]),t._v(" "),_("li",[_("code",[t._v("3n+10")]),t._v(" 和 3n 随着 n 变大，执行曲线无限接近，10 可以忽略")])]),t._v(" "),_("h3",{attrs:{id:"忽略低次项"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#忽略低次项"}},[t._v("#")]),t._v(" 忽略低次项")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("n")]),t._v(" "),_("th",[_("code",[t._v("T(n)=2n²+3n+10")])]),t._v(" "),_("th",[_("code",[t._v("T(2n²)")])]),t._v(" "),_("th",[_("code",[t._v("T(n²+5n+20)")])]),t._v(" "),_("th",[t._v("T(n²)")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("1")]),t._v(" "),_("td",[t._v("15")]),t._v(" "),_("td",[t._v("2")]),t._v(" "),_("td",[t._v("26")]),t._v(" "),_("td",[t._v("1")])]),t._v(" "),_("tr",[_("td",[t._v("2")]),t._v(" "),_("td",[t._v("24")]),t._v(" "),_("td",[t._v("8")]),t._v(" "),_("td",[t._v("34")]),t._v(" "),_("td",[t._v("4")])]),t._v(" "),_("tr",[_("td",[t._v("5")]),t._v(" "),_("td",[t._v("75")]),t._v(" "),_("td",[t._v("50")]),t._v(" "),_("td",[t._v("70")]),t._v(" "),_("td",[t._v("25")])]),t._v(" "),_("tr",[_("td",[t._v("8")]),t._v(" "),_("td",[t._v("162")]),t._v(" "),_("td",[t._v("128")]),t._v(" "),_("td",[t._v("124")]),t._v(" "),_("td",[t._v("64")])]),t._v(" "),_("tr",[_("td",[t._v("15")]),t._v(" "),_("td",[t._v("505")]),t._v(" "),_("td",[t._v("450")]),t._v(" "),_("td",[t._v("320")]),t._v(" "),_("td",[t._v("225")])]),t._v(" "),_("tr",[_("td",[t._v("30")]),t._v(" "),_("td",[t._v("1900")]),t._v(" "),_("td",[t._v("1800")]),t._v(" "),_("td",[t._v("1070")]),t._v(" "),_("td",[t._v("900")])]),t._v(" "),_("tr",[_("td",[t._v("100")]),t._v(" "),_("td",[t._v("20310")]),t._v(" "),_("td",[t._v("20000")]),t._v(" "),_("td",[t._v("10520")]),t._v(" "),_("td",[t._v("10000")])])])]),t._v(" "),_("p",[_("img",{attrs:{src:s(429),alt:"image-20200816230724232"}})]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("2n²+3n+10")]),t._v(" 和 "),_("code",[t._v("2n²")]),t._v(" 随着 n 变大，执行曲线无限接近，可以忽略 "),_("code",[t._v("3n+10")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("n²+5n+20")]),t._v(" 和 "),_("code",[t._v("n²")]),t._v(" 随着 n 变大，执行曲线无限接近，可以忽略 "),_("code",[t._v("5n+20")])])])]),t._v(" "),_("h3",{attrs:{id:"忽略系数"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#忽略系数"}},[t._v("#")]),t._v(" 忽略系数")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("n")]),t._v(" "),_("th",[_("code",[t._v("T(3n²+2n)")])]),t._v(" "),_("th",[_("code",[t._v("T(5n²+7n)")])]),t._v(" "),_("th",[_("code",[t._v("T(n^3+5n)")])]),t._v(" "),_("th",[_("code",[t._v("T(6n^3+4n)")])])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("1")]),t._v(" "),_("td",[t._v("5")]),t._v(" "),_("td",[t._v("12")]),t._v(" "),_("td",[t._v("6")]),t._v(" "),_("td",[t._v("10")])]),t._v(" "),_("tr",[_("td",[t._v("2")]),t._v(" "),_("td",[t._v("16")]),t._v(" "),_("td",[t._v("34")]),t._v(" "),_("td",[t._v("18")]),t._v(" "),_("td",[t._v("56")])]),t._v(" "),_("tr",[_("td",[t._v("5")]),t._v(" "),_("td",[t._v("85")]),t._v(" "),_("td",[t._v("160")]),t._v(" "),_("td",[t._v("150")]),t._v(" "),_("td",[t._v("770")])]),t._v(" "),_("tr",[_("td",[t._v("8")]),t._v(" "),_("td",[t._v("208")]),t._v(" "),_("td",[t._v("376")]),t._v(" "),_("td",[t._v("552")]),t._v(" "),_("td",[t._v("3104")])]),t._v(" "),_("tr",[_("td",[t._v("15")]),t._v(" "),_("td",[t._v("705")]),t._v(" "),_("td",[t._v("1230")]),t._v(" "),_("td",[t._v("3450")]),t._v(" "),_("td",[t._v("20310")])]),t._v(" "),_("tr",[_("td",[t._v("30")]),t._v(" "),_("td",[t._v("2760")]),t._v(" "),_("td",[t._v("4710")]),t._v(" "),_("td",[t._v("27150")]),t._v(" "),_("td",[t._v("162120")])]),t._v(" "),_("tr",[_("td",[t._v("100")]),t._v(" "),_("td",[t._v("30200")]),t._v(" "),_("td",[t._v("50700")]),t._v(" "),_("td",[t._v("1000500")]),t._v(" "),_("td",[t._v("6000400")])])])]),t._v(" "),_("p",[_("img",{attrs:{src:s(430),alt:"image-20200816231058264"}})]),t._v(" "),_("p",[t._v("结论：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("随着 n 值变大，"),_("code",[t._v("5n²+7n")]),t._v(" 和 "),_("code",[t._v("3n² + 2n")]),t._v(" ，执行曲线重合, 说明：这种情况下， 5 和 3 可以忽略")]),t._v(" "),_("p",[t._v("对于 2 次方来说，数量级很大的情况下，系数不是很重要（笔者怎么觉得相差也挺多的？是在对于后面更大的来说，看起来重合了而已）")])]),t._v(" "),_("li",[_("p",[t._v("而 "),_("code",[t._v("n^3+5n")]),t._v(" 和 "),_("code",[t._v("6n^3+4n")]),t._v("  ，执行曲线分离，说明 "),_("strong",[t._v("多少次方是关键")])]),t._v(" "),_("p",[t._v("对于 3 次方来说，系数就不能省略了，这里笔者还是觉得，系数并不能忽略把。")])])]),t._v(" "),_("h3",{attrs:{id:"小节"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#小节"}},[t._v("#")]),t._v(" 小节")]),t._v(" "),_("p",[t._v("时间频度计算还与以下三个统计注意事项：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("忽略常数项")]),t._v(" "),_("ul",[_("li",[_("code",[t._v("2n+20")]),t._v(" 和 2n 随着 n 变大，执行曲线无限接近， 20 可以忽略")]),t._v(" "),_("li",[_("code",[t._v("3n+10")]),t._v(" 和 3n 随着 n 变大，执行曲线无限接近，10 可以忽略")])])]),t._v(" "),_("li",[_("p",[t._v("忽略低次项")]),t._v(" "),_("ul",[_("li",[_("p",[_("code",[t._v("2n²+3n+10")]),t._v(" 和 "),_("code",[t._v("2n²")]),t._v(" 随着 n 变大，执行曲线无限接近，可以忽略 "),_("code",[t._v("3n+10")])])]),t._v(" "),_("li",[_("p",[_("code",[t._v("n²+5n+20")]),t._v(" 和 "),_("code",[t._v("n²")]),t._v(" 随着 n 变大，执行曲线无限接近，可以忽略 "),_("code",[t._v("5n+20")])])])])]),t._v(" "),_("li",[_("p",[t._v("忽略系数")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("随着 n 值变大，"),_("code",[t._v("5n²+7n")]),t._v(" 和 "),_("code",[t._v("3n² + 2n")]),t._v(" ，执行曲线重合, 说明：这种情况下， 5 和 3 可以忽略")]),t._v(" "),_("p",[t._v("对于 2 次方来说，数量级很大的情况下，系数不是很重要（笔者怎么觉得相差也挺多的？是在对于后面更大的来说，看起来重合了而已）")])]),t._v(" "),_("li",[_("p",[t._v("而 "),_("code",[t._v("n^3+5n")]),t._v(" 和 "),_("code",[t._v("6n^3+4n")]),t._v("  ，执行曲线分离，说明 "),_("strong",[t._v("多少次方是关键")])]),t._v(" "),_("p",[t._v("对于 3 次方来说，系数就不能省略了，次方越大，系数也越大的时候，相差其实是很大的")])])])])]),t._v(" "),_("h2",{attrs:{id:"时间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[t._v("#")]),t._v(" 时间复杂度")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("一般情况下：")]),t._v(" "),_("p",[t._v("算法中的 "),_("strong",[t._v("基本操作语句的重复执行次数是问题规模 n 的某个函数")]),t._v("，用 "),_("code",[t._v("T(n)")]),t._v(" 表示（就是前面的时间频度）")]),t._v(" "),_("p",[t._v("若有某个辅助函数 "),_("code",[t._v("f(n)")]),t._v("，使得当 n 趋近于无穷大时，"),_("code",[t._v("T（n）/f(n)")]),t._v(" 的极限值为不等于零的常数。（前面的频度分好几种，比如 "),_("code",[t._v("T(n) = n+1")]),t._v("，那么 "),_("code",[t._v("f(n) = n")]),t._v("，他们相除的话，就差不多是 1），则称 "),_("code",[t._v("f(n)是 T(n)")]),t._v(" 的同数量级函数，记作 "),_("code",[t._v("T(n)=O(f(n))")]),t._v("，"),_("strong",[t._v("简称 "),_("code",[t._v("O(f(n))")]),t._v(" 为算法的渐进时间复杂度，简称时间复杂度")])]),t._v(" "),_("p",[t._v("理解起来就差不多是，将时间频度的计算找到一个可以简写的函数 "),_("code",[t._v("f(n)")]),t._v("，然后计算它的世界复杂度")])]),t._v(" "),_("li",[_("p",[_("code",[t._v("T(n)")]),t._v(" 不同，但时间复杂度可能相同。")]),t._v(" "),_("p",[t._v("如："),_("code",[t._v("T(n) = n²+7n+6")]),t._v(" 与 "),_("code",[t._v("T(n) = n²+2n+2")]),t._v("，他们的 "),_("code",[t._v("T(n)")]),t._v(" 不同，但时间复杂度相同，都为 "),_("code",[t._v("O(n²)")]),t._v("。 过程是这样：")]),t._v(" "),_("div",{staticClass:"language- line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-text"}},[_("code",[t._v("f(n) = n² ; // 去掉了常数和系数，转换为 f(n) 函数\nO(f(n)) = O(n²)\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br")])]),_("p",[t._v("时间频度中说过，当 n 变大，系数和常数可以忽略")])]),t._v(" "),_("li",[_("p",[t._v("计算时间复杂度的方法")]),t._v(" "),_("p",[t._v("用常数 1 代替运行时间中的所有加法常数  "),_("code",[t._v("T(n)=n²+7n+6 => T(n)=n²+7n+1")])]),t._v(" "),_("p",[t._v("修改后的运行次数函数中，只保留最高阶项  "),_("code",[t._v("T(n)=n²+7n+1 => T(n) = n²")])]),t._v(" "),_("p",[t._v("去除最高阶项的系数 "),_("code",[t._v("T(n) = n² => T(n) = n² => O(n²)")]),t._v(" （  "),_("code",[t._v("n2")]),t._v(" 的系数是 1，"),_("code",[t._v("1n² = n²")]),t._v("）")])])]),t._v(" "),_("h2",{attrs:{id:"常见的复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常见的复杂度"}},[t._v("#")]),t._v(" 常见的复杂度")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("常数阶  "),_("code",[t._v("O(1)")])])]),t._v(" "),_("li",[_("p",[t._v("对数阶  O(log"),_("sub",[t._v("2")]),t._v("n)")])]),t._v(" "),_("li",[_("p",[t._v("线性阶 "),_("code",[t._v("O(n)")])])]),t._v(" "),_("li",[_("p",[t._v("线性对数阶 O(nlog"),_("sub",[t._v("2")]),t._v("n)")])]),t._v(" "),_("li",[_("p",[t._v("平方阶 "),_("code",[t._v("O(n²)")])]),t._v(" "),_("p",[t._v("比如：双层嵌套 for 循环")])]),t._v(" "),_("li",[_("p",[t._v("立方阶 O(n"),_("sup",[t._v("3")]),t._v(")")]),t._v(" "),_("p",[t._v("比如：3 层嵌套 for 循环")])]),t._v(" "),_("li",[_("p",[t._v("k 次方阶 "),_("code",[t._v("O(n^k)")])]),t._v(" "),_("p",[t._v("比如：嵌套了 k 次的 for 循环")])]),t._v(" "),_("li",[_("p",[t._v("指数阶 "),_("code",[t._v("O(2^n)")])])])]),t._v(" "),_("p",[t._v("以上常见的复杂度排列顺序是由小较大排列的，随着问题规模 n 的不断增大，上述时间复杂度不断增大，算法的执行效率越低")]),t._v(" "),_("p",[_("img",{attrs:{src:s(431),alt:"image-20200830144951559"}})]),t._v(" "),_("p",[t._v("上图的 "),_("strong",[t._v("指数阶")]),t._v("，就是 2 "),_("sup",[t._v("n")]),t._v("，当 n 不是很大的时候，就猛的往上走了，可见当出现了指数阶的时候，这个算法基本上是最慢的。上图在 n 为 10 的时候，就已经远远高于其他的复杂度了")]),t._v(" "),_("h3",{attrs:{id:"常数阶-o-1"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#常数阶-o-1"}},[t._v("#")]),t._v(" 常数阶  "),_("code",[t._v("O(1)")])]),t._v(" "),_("p",[t._v("无论代码执行了多少行，只要是没有循环等复杂结构，那么这个代码的时间复杂度就都是 "),_("code",[t._v("O(1)")])]),t._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" j "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nj"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" m "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" j"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br")])]),_("p",[t._v("上述代码在执行的时候，它消耗的时间并不随着某个变量的增长而增长（比如 i 和 j 的数值变大或变小，它的执行时间都是差不多的，不像循环次数那样，增大就多执行一次）。那么物理这类代码有多长，即使有几万几十万行，都可以用 "),_("code",[t._v("O(1)")]),t._v(" 来表示它的时间复杂度。")]),t._v(" "),_("h3",{attrs:{id:"对数阶-o-log2n"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#对数阶-o-log2n"}},[t._v("#")]),t._v(" 对数阶  O(log"),_("sub",[t._v("2")]),t._v("n)")]),t._v(" "),_("p",[t._v("读法：log 以 2 为底的 n 次方")]),t._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以 2 为底，这里的算法恰好是 * 2")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br")])]),_("p",[t._v("在 while 循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。假设循环 x 次之后，i  就大于 n 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log"),_("sub",[t._v("2")]),t._v("n 也就是说当循环 log"),_("sub",[t._v("2")]),t._v("n 次以后，这个代码就结束了。因此这个代码的时间复杂度为：O(log"),_("sub",[t._v("2")]),t._v("n)  。 O(log"),_("sub",[t._v("2")]),t._v("n) 的这个 2 时间上是根据代码变化的，i = i * 3 ，则是 O(log"),_("sub",[t._v("3")]),t._v("n) .")]),t._v(" "),_("p",[_("img",{attrs:{src:s(432),alt:"image-20200830150132228"}})]),t._v(" "),_("p",[t._v("继续说明，假设上面的 "),_("code",[t._v("n = 1024")]),t._v("，这个是规模问题 n，它执行几次结束？使用这里的对数阶则为 log"),_("sub",[t._v("2")]),t._v("1024 = 10 （2"),_("sup",[t._v("10")]),t._v(" = 1024），所以规模问题虽然很大，但是对于对数阶来说说，执行次数并没有那么大")]),t._v(" "),_("h3",{attrs:{id:"线性阶-o-n"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线性阶-o-n"}},[t._v("#")]),t._v(" 线性阶 "),_("code",[t._v("O(n)")])]),t._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("i"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  j "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  j"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br")])]),_("p",[t._v("for 循环里的代码会执行 n 遍，因此它消耗的时间是随着 n 的变化而变化的，因此这类代码都可以用 "),_("code",[t._v("O(n)")]),t._v(" 来表示它的时间复杂度")]),t._v(" "),_("h3",{attrs:{id:"线性对数阶-o-nlog2n"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#线性对数阶-o-nlog2n"}},[t._v("#")]),t._v(" 线性对数阶 O(nlog"),_("sub",[t._v("2")]),t._v("n)")]),t._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" m "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" m"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br")])]),_("p",[t._v("线性对数阶 O(nlog"),_("sub",[t._v("2")]),t._v("n) 其实非常容易理解，将实际复杂度 线性对数阶 O(log"),_("sub",[t._v("2")]),t._v("n) 的代码循环 N 遍，那么它的时间复杂度就是 n *  O(log"),_("sub",[t._v("2")]),t._v("n)，也就是 O(nlog"),_("sub",[t._v("2")]),t._v("n)")]),t._v(" "),_("h3",{attrs:{id:"平方阶-o-n2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#平方阶-o-n2"}},[t._v("#")]),t._v(" 平方阶 "),_("code",[t._v("O(n²)")])]),t._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v("n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" x"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    j "),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" i"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    j"),_("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br")])]),_("p",[t._v("平方阶 O(n²) 就更容易理解了，如果把 O(n)  的代码再嵌套循环一遍，它的时间复杂度就是  O(n²)，这段代码其实就是嵌套了 2 层 n 循环，它的时间复杂度就是 O(n x n)，即  O(n²)  如果将其中一层循环的 n 改成 m，那它的时间复杂度就变成了 O(m x n)")]),t._v(" "),_("h2",{attrs:{id:"平均时间复杂度和最坏时间复杂度"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#平均时间复杂度和最坏时间复杂度"}},[t._v("#")]),t._v(" 平均时间复杂度和最坏时间复杂度")]),t._v(" "),_("ol",[_("li",[_("p",[t._v("平均时间复杂度")]),t._v(" "),_("p",[t._v("指所有可能的输入实例 "),_("strong",[t._v("均以等概率出现")]),t._v(" 的情况下，该算法的运行时间")])]),t._v(" "),_("li",[_("p",[t._v("最坏时间复杂度")]),t._v(" "),_("p",[t._v("最坏情况下的世界复杂度称为最坏时间复杂度。")]),t._v(" "),_("p",[t._v("一般讨论的时间复杂度均是最坏情况下的世界复杂度，因为：最坏情况下的时间复杂度是算法在 "),_("strong",[t._v("任何输入实例上运行时间的界限")]),t._v("，这就保证了算法的运行时间不会比最坏情况更长")])])]),t._v(" "),_("p",[t._v("平均时间复杂度和最坏时间复杂度是否一致，和算法有关，如下图：")]),t._v(" "),_("p",[_("img",{attrs:{src:s(433),alt:"image-20200831223506200"}})])])}),[],!1,null,null,null);v.default=a.exports}}]);