(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{577:function(v,_,t){"use strict";t.r(_);var o=t(20),r=Object(o.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"三种表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三种表达式"}},[v._v("#")]),v._v(" 三种表达式")]),v._v(" "),t("h2",{attrs:{id:"前缀表达式-波兰表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前缀表达式-波兰表达式"}},[v._v("#")]),v._v(" 前缀表达式（波兰表达式）")]),v._v(" "),t("p",[v._v("前缀表达式又称为 "),t("strong",[v._v("波兰表达式")]),v._v("，前缀表达式的 "),t("strong",[v._v("运算符位于操作数之前")]),v._v("。")]),v._v(" "),t("p",[v._v("例如："),t("code",[v._v("(3+4)x5-6")]),v._v(" 对应的前缀表达式为："),t("code",[v._v("- x + 3 4 5 6")])]),v._v(" "),t("p",[v._v("注意：前面这个表达式是一个中缀表达式，对应的是后面的这个前缀表达式。它的符号出现的顺序与中缀的顺序不一致。")]),v._v(" "),t("p",[v._v("前缀表达式中的符号顺序，就是他求值的规定了")]),v._v(" "),t("h3",{attrs:{id:"前缀表达式求值过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前缀表达式求值过程"}},[v._v("#")]),v._v(" 前缀表达式求值过程")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("从 "),t("strong",[v._v("右到左")]),v._v(" 扫描表达式")])]),v._v(" "),t("li",[t("p",[v._v("遇到 "),t("strong",[v._v("数字")]),v._v(" 时，将数字压入堆栈")])]),v._v(" "),t("li",[t("p",[v._v("遇到 "),t("strong",[v._v("运算符")]),v._v(" 时")]),v._v(" "),t("p",[v._v("弹出栈顶的两个数（栈顶和次顶），用运算符对它们做相应的计算，并将结果入栈。")]),v._v(" "),t("p",[v._v("计算顺序是："),t("strong",[v._v("先")]),v._v(" 弹出来的  (运算符)  "),t("strong",[v._v("后")]),v._v(" 弹出来的")])])]),v._v(" "),t("p",[v._v("然后重复以上步骤，直到表达式的最左端，最后运算出的值则是表达式的值。")]),v._v(" "),t("p",[v._v("看完前缀表达式的计算逻辑，那么你要明白的是，从一个 **中缀表达式 **转换为 "),t("strong",[v._v("前缀表达式")]),v._v(" 时，"),t("strong",[v._v("优先级顺序是已经处理好的")]),v._v("，因为在求值时，不进行优先级的判定")]),v._v(" "),t("p",[v._v("例如："),t("code",[v._v("(3+4)x5-6")]),v._v(" 对应的前缀表达式为："),t("code",[v._v("- x + 3 4 5 6")]),v._v("，前缀表达式求值步骤如下：")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("从右到左扫描，将 6、5、4、3 压入栈")])]),v._v(" "),t("li",[t("p",[v._v("遇到 "),t("code",[v._v("+")]),v._v(" 运算符时：")]),v._v(" "),t("p",[v._v("将弹出 3 和 4（3 为栈顶元素，4 为次顶元素），计算出 "),t("code",[v._v("3 + 4 = 7")]),v._v("，将结果压入栈")])]),v._v(" "),t("li",[t("p",[v._v("遇到 "),t("code",[v._v("x")]),v._v(" 运算符时")]),v._v(" "),t("p",[v._v("将弹出 7 和 5，计算出 "),t("code",[v._v("7 x 5 = 35")]),v._v("，将 35 压入栈")])]),v._v(" "),t("li",[t("p",[v._v("遇到 "),t("code",[v._v("-")]),v._v(" 运算符时")]),v._v(" "),t("p",[v._v("将弹出 35 和 6，计算出 "),t("code",[v._v("35 - 6 = 29")]),v._v("，压入栈")])]),v._v(" "),t("li",[t("p",[v._v("扫描结束，栈中留下的唯一一个数字 29 则是表达式的值")])])]),v._v(" "),t("h2",{attrs:{id:"中缀表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#中缀表达式"}},[v._v("#")]),v._v(" 中缀表达式")]),v._v(" "),t("p",[v._v("中缀表达式就是 "),t("strong",[v._v("常见的运算表达式")]),v._v("，如 "),t("code",[v._v("(3+4)x5-6")]),v._v("。")]),v._v(" "),t("p",[v._v("中缀表达式的求值是人类最熟悉的，但是对于计算机来说却不好操作：")]),v._v(" "),t("ul",[t("li",[v._v("需要计算运算符的优先级")]),v._v(" "),t("li",[v._v("对于中括号来说，笔者想不出实现办法")])]),v._v(" "),t("p",[v._v("因此，在计算结果时，往往会将 "),t("strong",[v._v("中缀表达式")]),v._v(" 转成其他表达式，一般转成后缀表达式。")]),v._v(" "),t("h2",{attrs:{id:"后缀表达式-逆波兰表达式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后缀表达式-逆波兰表达式"}},[v._v("#")]),v._v(" 后缀表达式（逆波兰表达式）")]),v._v(" "),t("p",[t("strong",[v._v("后缀表达式")]),v._v(" 又称为 "),t("strong",[v._v("逆波兰表达式")]),v._v("，与前缀表达式类似，只是 "),t("strong",[v._v("运算符")]),v._v(" 位于 "),t("strong",[v._v("操作数之后")]),v._v("。")]),v._v(" "),t("p",[v._v("比如："),t("code",[v._v("(3+4)x5-6")]),v._v(" 对应的后缀表达式 "),t("code",[v._v("3 4 + 5 x 6 -")])]),v._v(" "),t("p",[v._v("再比如：")]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",[v._v("中缀表达式")]),v._v(" "),t("th",[v._v("后缀表达式")])])]),v._v(" "),t("tbody",[t("tr",[t("td",[t("code",[v._v("a + b")])]),v._v(" "),t("td",[t("code",[v._v("a b +")])])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("a + (b-c)")])]),v._v(" "),t("td",[t("code",[v._v("a b c - +")])])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("a+(b-c)*d")])]),v._v(" "),t("td",[t("code",[v._v("a b c - d * +")])])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("a+d*(b-c)")])]),v._v(" "),t("td",[t("code",[v._v("a d b c - * +")])])]),v._v(" "),t("tr",[t("td",[t("code",[v._v("a=1+3")])]),v._v(" "),t("td",[t("code",[v._v("a 1 3 + =")])])])])]),v._v(" "),t("h3",{attrs:{id:"后缀表达式求职过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后缀表达式求职过程"}},[v._v("#")]),v._v(" 后缀表达式求职过程")]),v._v(" "),t("ol",[t("li",[t("p",[v._v("从 "),t("strong",[v._v("左到右")]),v._v(" 扫描表达式")])]),v._v(" "),t("li",[t("p",[v._v("遇到 "),t("strong",[v._v("数字")]),v._v(" 时，将数字压入堆栈")])]),v._v(" "),t("li",[t("p",[v._v("遇到 "),t("strong",[v._v("运算符")]),v._v(" 时")]),v._v(" "),t("p",[v._v("弹出栈顶的两个数（栈顶和次顶），用运算符对它们做相应的计算，并将结果入栈。")]),v._v(" "),t("p",[v._v("计算顺序是："),t("strong",[v._v("后")]),v._v(" 弹出来的  (运算符)  "),t("strong",[v._v("先")]),v._v(" 弹出来的")])])]),v._v(" "),t("p",[v._v("然后重复以上步骤，直到表达式的最右端，最后运算出的值则是表达式的值。")]),v._v(" "),t("p",[v._v("比如："),t("code",[v._v("(3+4)x5-6")]),v._v(" 对应的后缀表达式 "),t("code",[v._v("3 4 + 5 x 6 -")])]),v._v(" "),t("ol",[t("li",[t("p",[v._v("从左到右扫描，将 3、4 压入堆栈")])]),v._v(" "),t("li",[t("p",[v._v("扫描到 "),t("code",[v._v("+")]),v._v(" 运算符时")]),v._v(" "),t("p",[v._v("将弹出 4 和 3，计算 "),t("code",[v._v("3 + 4 = 7")]),v._v("，将 7 压入栈")])]),v._v(" "),t("li",[t("p",[v._v("将 5 入栈")])]),v._v(" "),t("li",[t("p",[v._v("扫描到 "),t("code",[v._v("x")]),v._v(" 运算符时")]),v._v(" "),t("p",[v._v("将弹出 5 和 7 ，计算 "),t("code",[v._v("7 x 5 = 35")]),v._v("，将 35 入栈")])]),v._v(" "),t("li",[t("p",[v._v("将 6 入栈")])]),v._v(" "),t("li",[t("p",[v._v("扫描到 "),t("code",[v._v("-")]),v._v(" 运算符时")]),v._v(" "),t("p",[v._v("将弹出 6 和 35，计算 "),t("code",[v._v("35 - 6 = 29")]),v._v("，将 29 压入栈")])]),v._v(" "),t("li",[t("p",[v._v("扫描表达式结束，29 是表达式的值")])])])])}),[],!1,null,null,null);_.default=r.exports}}]);